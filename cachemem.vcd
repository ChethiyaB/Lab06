$date
	Thu Jun 13 01:48:25 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 ! \data_block_array[0] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 " \data_block_array[1] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 # \data_block_array[2] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 $ \data_block_array[3] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 % \data_block_array[4] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 & \data_block_array[5] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var reg 32 ' \data_block_array[6] [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CACHE $end
$var wire 1 ( clock $end
$var wire 1 ) reset $end
$var wire 8 * writedata [7:0] $end
$var wire 1 + write $end
$var wire 1 , read $end
$var wire 32 - mem_readdata [31:0] $end
$var wire 1 . mem_busywait $end
$var wire 8 / address [7:0] $end
$var parameter 3 0 IDLE $end
$var parameter 3 1 MEM_READ $end
$var parameter 3 2 MEM_WRITE $end
$var reg 1 3 busywait $end
$var reg 1 4 dirty $end
$var reg 1 5 hit $end
$var reg 1 6 hitflag $end
$var reg 6 7 mem_address [5:0] $end
$var reg 1 8 mem_read $end
$var reg 1 9 mem_write $end
$var reg 32 : mem_writedata [31:0] $end
$var reg 3 ; next_state [2:0] $end
$var reg 1 < readaccess $end
$var reg 8 = readdata [7:0] $end
$var reg 3 > state [2:0] $end
$var reg 1 ? writeaccess $end
$var integer 32 @ j [31:0] $end
$var integer 32 A k [31:0] $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$var wire 1 3 BUSYWAIT $end
$var wire 1 ( CLK $end
$var wire 32 B INSTRUCTION [31:0] $end
$var wire 8 C READDATA [7:0] $end
$var wire 1 ) RESET $end
$var wire 1 D ZERO $end
$var wire 1 E WRITEENABLE $end
$var wire 8 F WRITEDATA [7:0] $end
$var wire 1 + WRITE $end
$var wire 32 G TARGETOUT [31:0] $end
$var wire 8 H REGOUT2 [7:0] $end
$var wire 1 I REGIN_SELECT $end
$var wire 8 J REGIN [7:0] $end
$var wire 8 K REG2COMP [7:0] $end
$var wire 1 , READ $end
$var wire 32 L PC [31:0] $end
$var wire 32 M NEXTPC [31:0] $end
$var wire 8 N MUX5OUT [7:0] $end
$var wire 32 O MUX4OUT [31:0] $end
$var wire 32 P MUX3OUT [31:0] $end
$var wire 8 Q MUX2MUX [7:0] $end
$var wire 8 R MUX2ALU [7:0] $end
$var wire 32 S JUMPADDRESS [31:0] $end
$var wire 1 T JUMP $end
$var wire 8 U IMMCOMP [7:0] $end
$var wire 1 V COMP $end
$var wire 1 W BRANCH $end
$var wire 1 X ANDOUT $end
$var wire 1 Y ALUSRC $end
$var wire 3 Z ALUOP [2:0] $end
$var wire 8 [ ADDRESS [7:0] $end
$scope module ALU $end
$var wire 1 D ZERO $end
$var wire 8 \ SHIFTRESULT [7:0] $end
$var wire 3 ] SELECT [2:0] $end
$var wire 8 ^ ROTATERESULT [7:0] $end
$var wire 8 _ RESULT [7:0] $end
$var wire 8 ` ORRESULT [7:0] $end
$var wire 8 a MULTRESULT [7:0] $end
$var wire 8 b FORWARDRESULT [7:0] $end
$var wire 8 c DATA2 [7:0] $end
$var wire 8 d DATA1 [7:0] $end
$var wire 8 e ASHIFTRESULT [7:0] $end
$var wire 8 f ANDRESULT [7:0] $end
$var wire 8 g ADDRESULT [7:0] $end
$scope module addmodule $end
$var wire 8 h RESULT [7:0] $end
$var wire 8 i DATA2 [7:0] $end
$var wire 8 j DATA1 [7:0] $end
$upscope $end
$scope module alumux $end
$var wire 8 k ADDRESULT [7:0] $end
$var wire 8 l SHIFTRESULT [7:0] $end
$var wire 8 m ROTATERESULT [7:0] $end
$var wire 8 n ORRESULT [7:0] $end
$var wire 3 o MUXSELECT [0:2] $end
$var wire 8 p MULTRESULT [7:0] $end
$var wire 8 q FORWARDRESULT [7:0] $end
$var wire 8 r ASHIFTRESULT [7:0] $end
$var wire 8 s ANDRESULT [7:0] $end
$var reg 8 t MUXOUT [7:0] $end
$var reg 1 D ZERO $end
$upscope $end
$scope module andmodule $end
$var wire 8 u RESULT [7:0] $end
$var wire 8 v DATA2 [7:0] $end
$var wire 8 w DATA1 [7:0] $end
$upscope $end
$scope module arithmetic_shifter_module $end
$var wire 8 x SHIFTMT [7:0] $end
$var wire 8 y DATA1 [7:0] $end
$var reg 8 z RESULT [7:0] $end
$upscope $end
$scope module forwardmodule $end
$var wire 8 { RESULT [7:0] $end
$var wire 8 | DATA2 [7:0] $end
$var wire 8 } DATA1 [7:0] $end
$upscope $end
$scope module multmodule $end
$var wire 8 ~ RESULT [7:0] $end
$var wire 8 !" DATA2 [7:0] $end
$var wire 8 "" DATA1 [7:0] $end
$scope module adder8bit $end
$var wire 8 #" D [7:0] $end
$var wire 8 $" C [7:0] $end
$var wire 8 %" B [7:0] $end
$var wire 8 &" A [7:0] $end
$var reg 8 '" OUT [7:0] $end
$upscope $end
$scope module mux1 $end
$var wire 8 (" IN0 [7:0] $end
$var wire 1 )" SELECT $end
$var reg 8 *" MUXOUT [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 8 +" IN0 [7:0] $end
$var wire 1 ," SELECT $end
$var reg 8 -" MUXOUT [7:0] $end
$upscope $end
$scope module mux3 $end
$var wire 8 ." IN0 [7:0] $end
$var wire 1 /" SELECT $end
$var reg 8 0" MUXOUT [7:0] $end
$upscope $end
$scope module mux4 $end
$var wire 8 1" IN0 [7:0] $end
$var wire 1 2" SELECT $end
$var reg 8 3" MUXOUT [7:0] $end
$upscope $end
$upscope $end
$scope module ormodule $end
$var wire 8 4" RESULT [7:0] $end
$var wire 8 5" DATA2 [7:0] $end
$var wire 8 6" DATA1 [7:0] $end
$upscope $end
$scope module rotate_module $end
$var wire 8 7" RORAMT [7:0] $end
$var wire 8 8" DATA1 [7:0] $end
$var reg 8 9" RESULT [7:0] $end
$upscope $end
$scope module shiftmodule $end
$var wire 8 :" SHIFTMT [7:0] $end
$var wire 8 ;" DATA1 [7:0] $end
$var reg 8 <" RESULT [7:0] $end
$upscope $end
$upscope $end
$scope module AND_GATE $end
$var wire 1 D IN2 $end
$var wire 1 =" IN3 $end
$var wire 1 X OUT $end
$var wire 1 W IN1 $end
$upscope $end
$scope module COMPLIMENT $end
$var wire 8 >" OUT [7:0] $end
$var wire 8 ?" IN [7:0] $end
$upscope $end
$scope module CU $end
$var wire 1 3 BUSYWAIT $end
$var wire 1 ( CLK $end
$var wire 8 @" OPCODE [7:0] $end
$var reg 3 A" ALUOP [2:0] $end
$var reg 1 Y ALUSRC $end
$var reg 1 W BRANCH $end
$var reg 1 T JUMP $end
$var reg 1 B" READ $end
$var reg 1 , READMEM $end
$var reg 1 V REG2COMP $end
$var reg 1 I REGIN_SELECT $end
$var reg 1 C" WRITE $end
$var reg 1 E WRITEENABLE $end
$var reg 1 + WRITEMEM $end
$upscope $end
$scope module IMMCOMPLIMENT $end
$var wire 8 D" IN [7:0] $end
$var wire 8 E" OUT [7:0] $end
$upscope $end
$scope module JUMPMODULE $end
$var wire 8 F" IMM [7:0] $end
$var wire 32 G" NEXTPC [31:0] $end
$var reg 32 H" JUMPADDRESS [31:0] $end
$var reg 32 I" shifted [31:0] $end
$var reg 32 J" signExtended [31:0] $end
$upscope $end
$scope module MUX1 $end
$var wire 8 K" IN1 [7:0] $end
$var wire 1 V MUXSELECT $end
$var wire 8 L" IN0 [7:0] $end
$var reg 8 M" MUXOUT [7:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 8 N" IN0 [7:0] $end
$var wire 1 Y MUXSELECT $end
$var wire 8 O" IN1 [7:0] $end
$var reg 8 P" MUXOUT [7:0] $end
$upscope $end
$scope module MUX3 $end
$var wire 1 X MUXSELECT $end
$var wire 32 Q" IN1 [31:0] $end
$var wire 32 R" IN0 [31:0] $end
$var reg 32 S" MUXOUT [31:0] $end
$upscope $end
$scope module MUX4 $end
$var wire 32 T" IN0 [31:0] $end
$var wire 32 U" IN1 [31:0] $end
$var wire 1 T MUXSELECT $end
$var reg 32 V" MUXOUT [31:0] $end
$upscope $end
$scope module MUX5 $end
$var wire 8 W" IN0 [7:0] $end
$var wire 8 X" IN1 [7:0] $end
$var wire 1 V MUXSELECT $end
$var reg 8 Y" MUXOUT [7:0] $end
$upscope $end
$scope module MUX6 $end
$var wire 8 Z" IN0 [7:0] $end
$var wire 8 [" IN1 [7:0] $end
$var wire 1 I MUXSELECT $end
$var reg 8 \" MUXOUT [7:0] $end
$upscope $end
$scope module PC_ADDER $end
$var wire 1 3 BUSYWAIT $end
$var wire 1 ) RESET $end
$var wire 32 ]" CURRENTPC [31:0] $end
$var reg 32 ^" NEXTPC [31:0] $end
$upscope $end
$scope module PC_MODULE $end
$var wire 1 ( CLK $end
$var wire 32 _" NEWPC [31:0] $end
$var reg 32 `" CURRENTPC [31:0] $end
$upscope $end
$scope module REG_FILE $end
$var wire 1 ( CLK $end
$var wire 8 a" IN [7:0] $end
$var wire 3 b" INADDRESS [2:0] $end
$var wire 3 c" OUT1ADDRESS [2:0] $end
$var wire 3 d" OUT2ADDRESS [2:0] $end
$var wire 1 ) RESET $end
$var wire 1 E WRITE $end
$var reg 8 e" OUT1 [7:0] $end
$var reg 8 f" OUT2 [7:0] $end
$var integer 32 g" i [31:0] $end
$upscope $end
$scope module TARGET_ADDER $end
$var wire 8 h" IMM [7:0] $end
$var wire 32 i" NEXTPC [31:0] $end
$var reg 32 j" OUT [31:0] $end
$var reg 32 k" shifted [31:0] $end
$var reg 32 l" signExtended [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 m" \regArray[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 n" \regArray[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 o" \regArray[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 p" \regArray[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 q" \regArray[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 r" \regArray[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 s" \regArray[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module CPU $end
$scope module REG_FILE $end
$var reg 8 t" \regArray[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 2
b1 1
b0 0
$end
#0
$dumpvars
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
b0 i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
b0 _"
b0 ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
b0 V"
bx U"
b0 T"
b0 S"
b0 R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
b0 G"
bx F"
bx E"
bx D"
xC"
xB"
bx A"
bx @"
bx ?"
bx >"
x="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
x2"
bx 1"
bx 0"
x/"
bx ."
bx -"
x,"
bx +"
bx *"
x)"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
xY
0X
0W
0V
bx U
0T
bx S
bx R
bx Q
b0 P
b0 O
bx N
b0 M
bx L
bx K
bx J
xI
bx H
bx G
bx F
xE
xD
bx C
bx B
b0xxx A
b111 @
0?
b0 >
bx =
0<
b0 ;
bx :
09
08
bx 7
x6
x5
x4
03
bx /
0.
bx -
0,
0+
bx *
1)
0(
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#19
06
#80
b1000 g"
1(
#90
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 L
b0 ]"
b0 `"
#100
b100 O
b100 V"
b100 _"
b100 P
b100 S"
b100 T"
b100 M
b100 G"
b100 R"
b100 ^"
b100 i"
0)
#110
0C"
0B"
b1011 N
b1011 O"
b1011 Y"
b11110101 U
b11110101 E"
b11110101 X"
b11000 k"
b110 l"
b11000 I"
b110 J"
b1011 W"
b1011 D"
b0 @"
b110 b"
b0 c"
b11 d"
0="
b110 h"
b110 F"
b1100000000000001011 B
#120
b0 $"
b0 0"
12"
0/"
1,"
1)"
b0 \
b0 l
b0 <"
b1011 R
b1011 c
b1011 i
b1011 v
b1011 x
b1011 |
b1011 !"
b1011 5"
b1011 7"
b1011 :"
b1011 P"
0I
1Y
1E
b0 Z
b0 ]
b0 o
b0 A"
#130
b0 K
b0 >"
b0 K"
b0 Q
b0 M"
b0 N"
b0 e
b0 r
b0 z
b0 ^
b0 m
b0 9"
b10 A
b0 H
b0 ?"
b0 L"
b0 f"
b0 *
b0 F
b0 d
b0 j
b0 w
b0 y
b0 }
b0 ""
b0 6"
b0 8"
b0 ;"
b0 e"
b1011 J
b1011 \"
b1011 a"
b1011 /
b1011 [
b1011 _
b1011 t
b1011 Z"
bx1x11 `
bx1x11 n
bx1x11 4"
b0x0xx f
b0x0xx s
b0x0xx u
b1011 b
b1011 q
b1011 {
b11100 G
b11100 Q"
b11100 j"
b11100 S
b11100 H"
b11100 U"
#140
b0 #"
b0 3"
b0 %"
b0 -"
b0 &"
b0 *"
b0 1"
b0 ."
b0 +"
b0 ("
b1011 `
b1011 n
b1011 4"
b0 f
b0 s
b0 u
#149
06
#150
0D
b1011 g
b1011 h
b1011 k
#160
b0 a
b0 p
b0 ~
b0 '"
0(
#240
1(
#250
b1011 s"
b1000 O
b1000 V"
b1000 _"
b1000 P
b1000 S"
b1000 T"
b1000 M
b1000 G"
b1000 R"
b1000 ^"
b1000 i"
b100 L
b100 ]"
b100 `"
#270
02"
1/"
0)"
b110 R
b110 c
b110 i
b110 v
b110 x
b110 |
b110 !"
b110 5"
b110 7"
b110 :"
b110 P"
b110 N
b110 O"
b110 Y"
b11111010 U
b11111010 E"
b11111010 X"
b1100 k"
b11 l"
b1100 I"
b11 J"
b110 W"
b110 D"
b11 b"
b110 d"
b11 h"
b11 F"
b110000000000000110 B
#280
b1 A
b110 J
b110 \"
b110 a"
b110 /
b110 [
b110 _
b110 t
b110 Z"
b110 `
b110 n
b110 4"
b110 b
b110 q
b110 {
#290
b11110101 K
b11110101 >"
b11110101 K"
b1011 Q
b1011 M"
b1011 N"
b1011 H
b1011 ?"
b1011 L"
b1011 f"
b110 g
b110 h
b110 k
b10100 G
b10100 Q"
b10100 j"
b10100 S
b10100 H"
b10100 U"
#299
04
06
05
#320
0(
#400
1(
#410
b110 p"
b1100 O
b1100 V"
b1100 _"
b1100 P
b1100 S"
b1100 T"
b1100 M
b1100 G"
b1100 R"
b1100 ^"
b1100 i"
b1000 L
b1000 ]"
b1000 `"
#430
0,"
b100 R
b100 c
b100 i
b100 v
b100 x
b100 |
b100 !"
b100 5"
b100 7"
b100 :"
b100 P"
b100 N
b100 O"
b100 Y"
b11111100 U
b11111100 E"
b11111100 X"
b100 k"
b1 l"
b100 I"
b1 J"
b100 W"
b100 D"
b1 b"
b100 d"
b1 h"
b1 F"
b10000000000000100 B
#440
b100 J
b100 \"
b100 a"
b100 /
b100 [
b100 _
b100 t
b100 Z"
b100 `
b100 n
b100 4"
b100 b
b100 q
b100 {
#450
b0 K
b0 >"
b0 K"
b0 Q
b0 M"
b0 N"
b0 H
b0 ?"
b0 L"
b0 f"
b100 g
b100 h
b100 k
b10000 G
b10000 Q"
b10000 j"
b10000 S
b10000 H"
b10000 U"
#459
06
#480
0(
#560
1(
#570
b100 n"
b10000 O
b10000 V"
b10000 _"
b10000 P
b10000 S"
b10000 T"
b10000 M
b10000 G"
b10000 R"
b10000 ^"
b10000 i"
b1100 L
b1100 ]"
b1100 `"
#590
1C"
0/"
1,"
1)"
b11 R
b11 c
b11 i
b11 v
b11 x
b11 |
b11 !"
b11 5"
b11 7"
b11 :"
b11 P"
b11 N
b11 O"
b11 Y"
b11111101 U
b11111101 E"
b11111101 X"
b0 k"
b0 l"
b0 I"
b0 J"
b11 W"
b11 D"
b10000 @"
b0 b"
b110 c"
b11 d"
b0 h"
b0 F"
b10000000000000000011000000011 B
#600
0,"
0)"
b0 R
b0 c
b0 i
b0 v
b0 x
b0 |
b0 !"
b0 5"
b0 7"
b0 :"
b0 P"
b0 A
xI
0Y
0E
b11 J
b11 \"
b11 a"
b11 /
b11 [
b11 _
b11 t
b11 Z"
b11 `
b11 n
b11 4"
b11 b
b11 q
b11 {
#610
1/"
1,"
b110 R
b110 c
b110 i
b110 v
b110 x
b110 |
b110 !"
b110 5"
b110 7"
b110 :"
b110 P"
b11111010 K
b11111010 >"
b11111010 K"
b110 Q
b110 M"
b110 N"
b101100 ^
b101100 m
b101100 9"
b0 e
b0 r
b0 z
b11000000 \
b11000000 l
b11000000 <"
b110 H
b110 ?"
b110 L"
b110 f"
b1011 *
b1011 F
b1011 d
b1011 j
b1011 w
b1011 y
b1011 }
b1011 ""
b1011 6"
b1011 8"
b1011 ;"
b1011 e"
b0 /
b0 [
b0 _
b0 t
b0 Z"
b0 `
b0 n
b0 4"
b0 b
b0 q
b0 {
#619
06
#620
b1100 O
b1100 V"
b1100 _"
b1100 P
b1100 S"
b1100 T"
b1100 M
b1100 G"
b1100 R"
b1100 ^"
b1100 i"
1?
13
b1 ;
b101100 $"
b101100 0"
b10110 %"
b10110 -"
b1 A
1+
b1011000 1"
b101100 ."
b10110 +"
b1011 ("
b110 /
b110 [
b110 _
b110 t
b110 Z"
b10 f
b10 s
b10 u
b110 b
b110 q
b110 {
b1111 `
b1111 n
b1111 4"
#629
06
#630
b10001 g
b10001 h
b10001 k
#639
06
#640
b1000010 a
b1000010 p
b1000010 ~
b1000010 '"
0(
#720
1.
b1 7
18
b1 ;
b1 >
1(
#800
0(
#880
1(
#960
0(
#1040
1(
#1120
0(
#1200
1(
#1280
0(
bx00000000 -
#1360
1(
#1440
0(
#1520
1(
#1600
0(
#1680
1(
bx0000000000000000 -
#1760
0(
#1840
1(
#1920
0(
#2000
1(
#2080
0(
bx000000000000000000000000 -
#2160
1(
#2240
0(
#2320
1(
#2400
0(
#2480
0?
0+
b10000 O
b10000 V"
b10000 _"
b10000 P
b10000 S"
b10000 T"
b10000 M
b10000 G"
b10000 R"
b10000 ^"
b10000 i"
03
bx 7
08
b0 >
b0 ;
1(
0.
b0 -
#2499
06
#2540
b1100 O
b1100 V"
b1100 _"
b1100 P
b1100 S"
b1100 T"
b1100 M
b1100 G"
b1100 R"
b1100 ^"
b1100 i"
1?
13
b1 ;
1+
#2559
06
#2560
0(
#2640
1.
b1 7
18
b1 ;
b1 >
1(
#2720
0(
#2800
1(
#2880
0(
#2960
1(
#3040
0(
#3120
1(
#3200
0(
#3280
1(
#3360
0(
#3440
1(
#3520
0(
#3600
1(
#3680
0(
#3760
1(
#3840
0(
#3920
1(
#4000
0(
#4080
1(
#4160
0(
#4240
1(
#4320
0(
#4400
0?
0+
b10000 O
b10000 V"
b10000 _"
b10000 P
b10000 S"
b10000 T"
b10000 M
b10000 G"
b10000 R"
b10000 ^"
b10000 i"
03
bx 7
08
b0 >
b0 ;
1(
0.
#4419
06
#4460
b1100 O
b1100 V"
b1100 _"
b1100 P
b1100 S"
b1100 T"
b1100 M
b1100 G"
b1100 R"
b1100 ^"
b1100 i"
1?
13
b1 ;
1+
#4479
06
#4480
0(
#4560
1.
b1 7
18
b1 ;
b1 >
1(
#4640
0(
#4720
1(
#4800
0(
#4880
1(
#4960
0(
#5040
1(
#5100
