$date
	Sat May 25 13:48:44 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$scope module uut $end
$var wire 8 ! DATA1 [7:0] $end
$var wire 8 " DATA2 [7:0] $end
$var wire 3 # SELECT [2:0] $end
$var wire 1 $ ZERO $end
$var wire 8 % RESULT [7:0] $end
$var wire 8 & ORRESULT [7:0] $end
$var wire 8 ' MULTRESULT [7:0] $end
$var wire 8 ( FORWARDRESULT [7:0] $end
$var wire 8 ) ANDRESULT [7:0] $end
$var wire 8 * ADDRESULT [7:0] $end
$scope module addmodule $end
$var wire 8 + DATA1 [7:0] $end
$var wire 8 , DATA2 [7:0] $end
$var wire 8 - RESULT [7:0] $end
$upscope $end
$scope module alumux $end
$var wire 8 . ADDRESULT [7:0] $end
$var wire 3 / MUXSELECT [0:2] $end
$var wire 8 0 ORRESULT [7:0] $end
$var wire 8 1 MULTRESULT [7:0] $end
$var wire 8 2 FORWARDRESULT [7:0] $end
$var wire 8 3 ANDRESULT [7:0] $end
$var reg 8 4 MUXOUT [7:0] $end
$var reg 1 $ ZERO $end
$upscope $end
$scope module andmodule $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var wire 8 7 RESULT [7:0] $end
$upscope $end
$scope module forwardmodule $end
$var wire 8 8 DATA1 [7:0] $end
$var wire 8 9 DATA2 [7:0] $end
$var wire 8 : RESULT [7:0] $end
$upscope $end
$scope module multmodule $end
$var wire 8 ; DATA1 [7:0] $end
$var wire 8 < DATA2 [7:0] $end
$var wire 8 = RESULT [7:0] $end
$scope module adder8bit $end
$var wire 8 > D [7:0] $end
$var wire 8 ? C [7:0] $end
$var wire 8 @ B [7:0] $end
$var wire 8 A A [7:0] $end
$var reg 8 B OUT [7:0] $end
$upscope $end
$scope module mux1 $end
$var wire 8 C IN0 [7:0] $end
$var wire 1 D SELECT $end
$var reg 8 E MUXOUT [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 8 F IN0 [7:0] $end
$var wire 1 G SELECT $end
$var reg 8 H MUXOUT [7:0] $end
$upscope $end
$scope module mux3 $end
$var wire 8 I IN0 [7:0] $end
$var wire 1 J SELECT $end
$var reg 8 K MUXOUT [7:0] $end
$upscope $end
$scope module mux4 $end
$var wire 8 L IN0 [7:0] $end
$var wire 1 M SELECT $end
$var reg 8 N MUXOUT [7:0] $end
$upscope $end
$upscope $end
$scope module ormodule $end
$var wire 8 O DATA1 [7:0] $end
$var wire 8 P DATA2 [7:0] $end
$var wire 8 Q RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx Q
b0 P
b0 O
b0 N
0M
bx L
b0 K
0J
bx I
b0 H
0G
bx F
b0 E
0D
bx C
bx B
b0 A
b0 @
b0 ?
b0 >
bx =
b0 <
b0 ;
bx :
b0 9
b0 8
bx 7
b0 6
b0 5
bx 4
bx 3
bx 2
bx 1
bx 0
b0 /
bx .
bx -
b0 ,
b0 +
bx *
bx )
bx (
bx '
bx &
bx %
x$
b0 #
b0 "
b0 !
$end
#1
b0 L
b0 I
b0 F
b0 C
b0 &
b0 0
b0 Q
b0 )
b0 3
b0 7
#2
1$
b0 %
b0 4
b0 '
b0 1
b0 =
b0 B
b0 *
b0 -
b0 .
b0 (
b0 2
b0 :
#5
1D
b100 #
b100 /
b1 "
b1 ,
b1 6
b1 9
b1 <
b1 P
b10101010 !
b10101010 +
b10101010 5
b10101010 8
b10101010 ;
b10101010 O
#6
b1010 A
b1010 E
b1010000 L
b101000 I
b10100 F
b1010 C
b10101011 &
b10101011 0
b10101011 Q
#7
0$
b1 (
b1 2
b1 :
b10101011 *
b10101011 -
b10101011 .
#8
b1010 %
b1010 4
b1010 '
b1010 1
b1010 =
b1010 B
#10
b10101011 %
b10101011 4
b1 #
b1 /
#15
b0 %
b0 4
b10 #
b10 /
#20
b10101011 %
b10101011 4
b11 #
b11 /
#25
b1010 %
b1010 4
b100 #
b100 /
#30
